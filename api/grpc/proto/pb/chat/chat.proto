syntax = "proto3";

package chat;

option go_package = "github.com/GarotoCowboy/vttProject/api/grpc/pb/chat;chat";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";


// The `Chat` service manages all messaging operations within tables (rooms).
service Chat{
  // Sends a message to a table (public room chat).
  rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty);

  // Lists messages from a table using pagination.
  rpc ListMessages(ListMessagesRequest) returns (ListChatMessageResponse);

  // Updates the content of a previously sent message.
  rpc UpdateMessage(UpdateMessageRequest)returns (google.protobuf.Empty);

  // Deletes a message for the sender (soft delete).
  rpc DeleteMessage(DeleteMessageRequest) returns (google.protobuf.Empty);

  // Sends a private message from one user to another within the context of a table.
  rpc SendPrivateMessage(SendPrivateMessageRequest) returns (google.protobuf.Empty);
}


// Enumeration of possible message content types.
enum MessageType{
  TEXT = 0;     // A plain text message.
  IMAGE = 1;    // A message containing an image.
  VIDEO = 2;    // A message containing a video.
  AUDIO = 3;    // A message containing an audio clip.
  DOCUMENT = 4; // A message containing a document or file.
  SYSTEM = 5;   // A message generated by the system (e.g., "User has joined the room").
}

// Enumeration of message delivery statuses.
enum MessageStatus{
  SENT = 0;      // The message was sent by the client and received by the server.
  DELIVERED = 1; // The message has been delivered to the recipient(s).
  READ = 2;      // The message has been read by the recipient(s).
}

// Request to list messages for a table.
message ListMessagesRequest{
  // ID of the table (room) to list messages from.
  uint64 table_id = 1;
  // ID of the last message received from the previous page, used for cursor-based pagination.
  optional string last_message_id = 2;
  // The maximum number of messages to return per page.
  int32 page_size = 3;
}

// Response containing the list of messages and pagination information.
message ListChatMessageResponse{
  // The list of retrieved messages.
  repeated ChatMessageResponse messages = 1;
  // The cursor to be used in the next request to get the following page.
  optional string next_cursor = 2;
}

// Request to send a new message to a table.
message SendMessageRequest{
  // ID of the table where the message will be sent.
  uint64 table_id = 1;
  // ID of the user sending the message.
  uint64 user_id = 2;
  // The text content of the message.
  optional string message_text = 3;
  // The type of the message (TEXT, IMAGE, etc.).
  MessageType messageType = 4;
  // The initial status of the message (usually SENT).
  MessageStatus messageStatus = 5;
  // Timestamp of when the message was sent.
  google.protobuf.Timestamp send_at = 6;
  // UUID of the message to which this is a reply.
  optional string reply_to_message_id = 7;
  // A list of URLs or identifiers for attachments.
  repeated string attachments = 8;
  // The primary URL for media if the type is IMAGE, VIDEO, etc.
  optional string media_url = 9;
}

// Represents a single chat message.
message ChatMessageResponse{
  // The unique UUID of the message.
  string message_uuid = 1;
  // ID of the table the message belongs to.
  uint64 table_id = 2;
  // ID of the sender user.
  uint64 sender_id = 3;
  // Username of the sender.
  string sender_username = 4;
  // Text content of the message.
  string message_text = 5;
  // The type of the message.
  MessageType message_type = 6;
  // The status of the message (sent, delivered, read).
  MessageStatus message_status = 7;
  // The sent timestamp.
  google.protobuf.Timestamp sent_at = 8;
  // The primary media URL.
  optional string media_url = 9;
  // List of attachments.
  repeated string attachments = 10;
  // UUID of the original message if this is a reply.
  optional string reply_to_message_id = 11;
  // Flag indicating if the message has been deleted by the sender.
  bool is_deleted = 12;
  // Timestamp of the last message update.
  optional google.protobuf.Timestamp updated_at = 13;
  // If this is a private message, this field contains the recipient's ID.
  optional uint64 private_recipient_id = 14;
}

// Request to delete a message.
message DeleteMessageRequest{
  // ID of the user within the table (table_user_id) requesting the deletion.
  uint64 table_user_id = 1;
  // UUID of the message to be deleted.
  string message_uuid = 2;
}

// Request to send a private message.
message SendPrivateMessageRequest{
  // ID of the sending user in the table.
  uint64 table_user_id = 1;
  // ID of the recipient user in the table.
  uint64 to_table_user_id = 2;
  // Username of the sender.
  string username = 3;
  // Text content of the message.
  optional string message = 4;
  // The unique UUID of the message.
  string message_uuid = 5;
  // The primary media URL, if any.
  optional string media_url = 6;
  // List of attachments.
  repeated string attachments = 7;
  // The type of the message.
  MessageType messageType = 8;
  // The status of the message.
  MessageStatus messageStatus = 9;
  // The sent timestamp.
  google.protobuf.Timestamp send_at = 10;
  // UUID of the original message if this is a reply.
  optional string reply_to_message_id = 11;
}

// Request to update a message's content.
message UpdateMessageRequest{
  // ID of the user in the table requesting the update.
  uint64 table_user_id = 1;
  // UUID of the message to be updated.
  string message_uuid = 2;
  // The new text content for the message.
  string new_message = 3;
  // The update timestamp.
  google.protobuf.Timestamp updated_at = 4;
}

// Event Messages - Likely intended for a messaging system (e.g., Kafka, RabbitMQ) for real-time client synchronization.

// Event triggered when a new message is sent.
message ChatMessageSent {
  // The message that was sent.
  ChatMessageResponse message = 1;
}

// Event triggered when a message is updated.
message ChatMessageUpdated {
  // The message with its updated content.
  ChatMessageResponse message = 1;
}

// Event triggered when a message is deleted.
message ChatMessageDeleted {
  // UUID of the message that was deleted.
  string message_uuid = 1;
  // ID of the table where the message was deleted.
  uint64 table_id = 2;
}